---
route: /
title: Ultra-Modern MTM Framework
description: Server-side rendered pages with reactive components
keywords: MTM, SSR, reactive, framework
layout: default
---

// Server-side data fetching
$userCount! = signal('userCount', 0)
$messages! = signal('messages', [])
$theme! = signal('theme', 'light')
$demoStats! = signal('demoStats', {
  totalComponents: 4,
  frameworks: ['React', 'Vue', 'Solid', 'Svelte'],
  lastUpdated: new Date().toISOString()
})

  // Page lifecycle - runs on server and client
  $onMount = () => {
    signal.emit('page-loaded', { 
      page: 'home', 
      timestamp: Date.now() 
    })
    
    // Initialize demo data
    if (typeof window !== 'undefined') {
      $userCount = Math.floor(Math.random() * 100) + 50
      $messages = [
        { id: 1, text: 'Welcome to MTM!', timestamp: new Date().toLocaleTimeString() },
        { id: 2, text: 'Multi-framework magic ✨', timestamp: new Date().toLocaleTimeString() }
      ]
    }
  }

  $incrementUsers = () => {
    $userCount++
    signal.emit('user-count-changed', { count: $userCount })
  }

  $addMessage = (text) => {
    $message = {
      id: Date.now(),
      text,
      timestamp: new Date().toLocaleTimeString()
    }
    $messages = [...$messages, $message]
    signal.emit('message-added', $message)
  }

  $toggleTheme = () => {
    $theme = $theme === 'light' ? 'dark' : 'light'
    signal.emit('theme-changed', { theme: $theme })
  }

  <template>
    <div class="app-container" data-theme={$theme}>
      <header class="header">
        <h1>🚀 Ultra-Modern MTM Framework</h1>
        <p>Server-side rendered pages with reactive components</p>
        <div class="theme-toggle">
          <button click={$toggleTheme} class="button secondary">
            {$theme === 'light' ? '🌙' : '☀️'} {$theme} mode
          </button>
        </div>
      </header>

      <div class="shared-state-display">
        <h3>🔄 Live State (SSR + Hydration)</h3>
        <div class="state-grid">
          <div class="state-item">
            <span class="state-label">Active Users:</span>
            <span class="metric-value">{$userCount}</span>
            <button click={$incrementUsers} class="button small">+1</button>
          </div>
          <div class="state-item">
            <span class="state-label">Messages:</span>
            <span class="metric-value">{$messages.length}</span>
            <button click={() => $addMessage('New message!')} class="button small">Add</button>
          </div>
          <div class="state-item">
            <span class="state-label">Theme:</span>
            <span class="metric-value">{$theme}</span>
          </div>
          <div class="state-item">
            <span class="state-label">Frameworks:</span>
            <span class="metric-value">{$demoStats.frameworks.length}</span>
          </div>
        </div>
      </div>

      <div class="framework-showcase">
        <h3>📦 Component Showcase</h3>
        <p>Each component below demonstrates different framework integrations:</p>
        
        <div class="component-grid">
          <div class="component-card">
            <h4>⚛️ React Counter</h4>
            <p>Reactive state with hooks integration</p>
            <div class="component-embed" data-component="counter.react.mtm"></div>
          </div>
          
          <div class="component-card">
            <h4>💚 Vue Message Board</h4>
            <p>Composition API with reactive refs</p>
            <div class="component-embed" data-component="message-board.vue.mtm"></div>
          </div>
          
          <div class="component-card">
            <h4>🔷 Solid Theme Toggle</h4>
            <p>Native signals integration</p>
            <div class="component-embed" data-component="theme-toggle.solid.mtm"></div>
          </div>
          
          <div class="component-card">
            <h4>🧡 Svelte User List</h4>
            <p>Store-based state management</p>
            <div class="component-embed" data-component="user-list.svelte.mtm"></div>
          </div>
        </div>
      </div>

      <div class="messages-section">
        <h3>💬 Live Messages</h3>
        <div class="message-list">
          {#if $messages.length === 0}
            <div class="empty-state">No messages yet</div>
          {:else}
            {#each $messages as message}
              <div class="message-item" key={message.id}>
                <span class="message-text">{message.text}</span>
                <span class="message-time">{message.timestamp}</span>
              </div>
            {/each}
          {/if}
        </div>
        
        <div class="message-input">
          <input 
            type="text" 
            placeholder="Type a message..." 
            keyup={(e) => e.key === 'Enter' && $addMessage(e.target.value) && (e.target.value = '')}
            class="input"
          />
        </div>
      </div>

      <div class="features-section">
        <h3>✨ Ultra-Modern Features</h3>
        <div class="features-grid">
          <div class="feature-item">
            <h4>🚀 Server-Side Rendering</h4>
            <p>Pages render on the server for optimal SEO and performance</p>
          </div>
          <div class="feature-item">
            <h4>⚡ Progressive Hydration</h4>
            <p>Components hydrate progressively for instant interactivity</p>
          </div>
          <div class="feature-item">
            <h4>🔄 Universal Signals</h4>
            <p>Shared state works seamlessly across server and client</p>
          </div>
          <div class="feature-item">
            <h4>🎯 Zero Configuration</h4>
            <p>File-based routing with automatic framework detection</p>
          </div>
        </div>
      </div>

      <footer class="footer">
        <p>Built with Ultra-Modern MTM • Last updated: {$demoStats.lastUpdated}</p>
        <nav class="footer-nav">
          <a href="/docs">📚 Documentation</a>
          <a href="/performance">📊 Performance</a>
          <a href="https://github.com/metamon/mtm">🔗 GitHub</a>
        </nav>
      </footer>
    </div>
  </template>