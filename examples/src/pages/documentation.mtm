---
target: vue
route: /docs
---

<template>
  <div class="app-container">
    <header class="header">
      <h1>üìö Documentation & Examples</h1>
      <p>Learn how to use Metamon with code examples for each framework</p>
    </header>

    <div class="docs-nav">
      <button 
        v-for="section in sections" 
        :key="section.id"
        @click="activeSection = section.id"
        :class="['button', activeSection === section.id ? '' : 'secondary']"
      >
        {{ section.title }}
      </button>
    </div>

    <div class="docs-content">
      <div v-if="activeSection === 'getting-started'" class="docs-section">
        <h2>üöÄ Getting Started</h2>
        
        <h3>Installation</h3>
        <pre><code>npm install @metamon/core @metamon/adapters @metamon/build-tools</code></pre>
        
        <h3>Basic Setup</h3>
        <pre><code>// vite.config.js
import { defineConfig } from 'vite';
import { metamon } from '@metamon/build-tools';

export default defineConfig({
  plugins: [
    metamon({
      frameworks: ['react', 'vue', 'solid', 'svelte']
    })
  ]
});</code></pre>

        <h3>Your First .mtm File</h3>
        <pre><code>---
target: reactjs
channels:
  - event: hello-world
    emit: onHelloWorld
---

import React from 'react';

export default function HelloWorld() {
  return &lt;h1&gt;Hello from Metamon!&lt;/h1&gt;;
}</code></pre>
      </div>

      <div v-if="activeSection === 'react'" class="docs-section">
        <h2>‚öõÔ∏è React Examples</h2>
        
        <h3>Using Signals in React</h3>
        <pre><code>---
target: reactjs
---

import React from 'react';
import { useMetamonSignal } from '@metamon/adapters/react';

export default function ReactComponent() {
  const [count, setCount] = useMetamonSignal('globalCount');
  
  return (
    &lt;div&gt;
      &lt;p&gt;Count: {count}&lt;/p&gt;
      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;
        Increment
      &lt;/button&gt;
    &lt;/div&gt;
  );
}</code></pre>

        <h3>Using PubSub in React</h3>
        <pre><code>import { useMetamonPubSub } from '@metamon/adapters/react';

export default function ReactPubSub() {
  const { emit, subscribe } = useMetamonPubSub();
  
  useEffect(() =&gt; {
    const unsubscribe = subscribe('user-action', (data) =&gt; {
      console.log('Received:', data);
    });
    
    return unsubscribe;
  }, []);
  
  const handleClick = () =&gt; {
    emit('user-action', { type: 'click', timestamp: Date.now() });
  };
  
  return &lt;button onClick={handleClick}&gt;Send Event&lt;/button&gt;;
}</code></pre>
      </div>

      <div v-if="activeSection === 'vue'" class="docs-section">
        <h2>üíö Vue Examples</h2>
        
        <h3>Using Signals in Vue</h3>
        <pre><code>---
target: vue
---

&lt;template&gt;
  &lt;div&gt;
    &lt;p&gt;Count: {{ count }}&lt;/p&gt;
    &lt;button @click="increment"&gt;Increment&lt;/button&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script setup&gt;
import { useMetamonSignal } from '@metamon/adapters/vue';

const [count, setCount] = useMetamonSignal('globalCount');

const increment = () =&gt; {
  setCount(count.value + 1);
};
&lt;/script&gt;</code></pre>

        <h3>Using PubSub in Vue</h3>
        <pre><code>&lt;script setup&gt;
import { onMounted, onUnmounted } from 'vue';
import { useMetamonPubSub } from '@metamon/adapters/vue';

const { emit, subscribe } = useMetamonPubSub();
let unsubscribe;

onMounted(() =&gt; {
  unsubscribe = subscribe('user-action', (data) =&gt; {
    console.log('Received:', data);
  });
});

onUnmounted(() =&gt; {
  unsubscribe?.();
});

const handleClick = () =&gt; {
  emit('user-action', { type: 'click', timestamp: Date.now() });
};
&lt;/script&gt;</code></pre>
      </div>

      <div v-if="activeSection === 'solid'" class="docs-section">
        <h2>üî∑ Solid Examples</h2>
        
        <h3>Using Signals in Solid</h3>
        <pre><code>---
target: solid
---

import { useMetamonSignal } from '@metamon/adapters/solid';

export default function SolidComponent() {
  const [count, setCount] = useMetamonSignal('globalCount');
  
  return (
    &lt;div&gt;
      &lt;p&gt;Count: {count()}&lt;/p&gt;
      &lt;button onClick={() =&gt; setCount(count() + 1)}&gt;
        Increment
      &lt;/button&gt;
    &lt;/div&gt;
  );
}</code></pre>

        <h3>Native Solid Signal Integration</h3>
        <pre><code>import { createEffect } from 'solid-js';
import { useMetamonSignal } from '@metamon/adapters/solid';

export default function SolidAdvanced() {
  const [theme, setTheme] = useMetamonSignal('theme');
  
  // Solid's createEffect works seamlessly with Metamon signals
  createEffect(() =&gt; {
    document.body.className = theme();
  });
  
  return (
    &lt;button onClick={() =&gt; setTheme(theme() === 'light' ? 'dark' : 'light')}&gt;
      Toggle Theme: {theme()}
    &lt;/button&gt;
  );
}</code></pre>
      </div>

      <div v-if="activeSection === 'svelte'" class="docs-section">
        <h2>üß° Svelte Examples</h2>
        
        <h3>Using Signals in Svelte</h3>
        <pre><code>---
target: svelte
---

&lt;script&gt;
  import { useMetamonSignal } from '@metamon/adapters/svelte';
  
  const [count, setCount] = useMetamonSignal('globalCount');
  
  function increment() {
    setCount($count + 1);
  }
&lt;/script&gt;

&lt;div&gt;
  &lt;p&gt;Count: {$count}&lt;/p&gt;
  &lt;button on:click={increment}&gt;Increment&lt;/button&gt;
&lt;/div&gt;</code></pre>

        <h3>Combining with Svelte Stores</h3>
        <pre><code>&lt;script&gt;
  import { writable } from 'svelte/store';
  import { useMetamonSignal, useMetamonPubSub } from '@metamon/adapters/svelte';
  
  const [globalCount, setGlobalCount] = useMetamonSignal('globalCount');
  const localCount = writable(0);
  const { emit } = useMetamonPubSub();
  
  function syncCounts() {
    setGlobalCount($localCount);
    emit('count-synced', { local: $localCount, global: $globalCount });
  }
&lt;/script&gt;

&lt;div&gt;
  &lt;p&gt;Local: {$localCount} | Global: {$globalCount}&lt;/p&gt;
  &lt;button on:click={() =&gt; $localCount++}&gt;Local +1&lt;/button&gt;
  &lt;button on:click={syncCounts}&gt;Sync to Global&lt;/button&gt;
&lt;/div&gt;</code></pre>
      </div>

      <div v-if="activeSection === 'routing'" class="docs-section">
        <h2>üõ£Ô∏è Routing Examples</h2>
        
        <h3>File-based Routing</h3>
        <pre><code>src/
  pages/
    index.mtm          ‚Üí /
    about.mtm          ‚Üí /about
    users/
      index.mtm        ‚Üí /users
      [id].mtm         ‚Üí /users/:id
    blog/
      [slug].mtm       ‚Üí /blog/:slug</code></pre>

        <h3>Dynamic Routes</h3>
        <pre><code>---
target: reactjs
route: /users/[id]
---

import React from 'react';
import { useMetamonRouter } from '@metamon/core';

export default function UserPage() {
  const { params } = useMetamonRouter();
  
  return (
    &lt;div&gt;
      &lt;h1&gt;User Profile&lt;/h1&gt;
      &lt;p&gt;User ID: {params.id}&lt;/p&gt;
    &lt;/div&gt;
  );
}</code></pre>

        <h3>Programmatic Navigation</h3>
        <pre><code>import { useMetamonRouter } from '@metamon/core';

export default function Navigation() {
  const { navigate } = useMetamonRouter();
  
  const goToUser = (userId) =&gt; {
    navigate(`/users/${userId}`);
  };
  
  return (
    &lt;button onClick={() =&gt; goToUser(123)}&gt;
      Go to User 123
    &lt;/button&gt;
  );
}</code></pre>
      </div>

      <div v-if="activeSection === 'best-practices'" class="docs-section">
        <h2>‚ú® Best Practices</h2>
        
        <h3>Signal Management</h3>
        <ul>
          <li>Use descriptive names for global signals</li>
          <li>Initialize signals with sensible defaults</li>
          <li>Clean up signals when no longer needed</li>
          <li>Prefer local state for component-specific data</li>
        </ul>

        <h3>Event Communication</h3>
        <ul>
          <li>Use consistent event naming conventions</li>
          <li>Include relevant data in event payloads</li>
          <li>Avoid circular event dependencies</li>
          <li>Document your event contracts</li>
        </ul>

        <h3>Performance Tips</h3>
        <ul>
          <li>Only include frameworks you actually use</li>
          <li>Use tree-shaking to eliminate unused code</li>
          <li>Batch signal updates when possible</li>
          <li>Avoid excessive event emissions</li>
        </ul>

        <h3>Project Structure</h3>
        <pre><code>src/
  components/          # Reusable .mtm components
    ui/               # UI components
    forms/            # Form components
  pages/              # Route pages
  layouts/            # Layout components
  shared/             # Shared utilities
    signals.js        # Signal definitions
    events.js         # Event type definitions</code></pre>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref } from 'vue';

const activeSection = ref('getting-started');

const sections = [
  { id: 'getting-started', title: 'Getting Started' },
  { id: 'react', title: 'React' },
  { id: 'vue', title: 'Vue' },
  { id: 'solid', title: 'Solid' },
  { id: 'svelte', title: 'Svelte' },
  { id: 'routing', title: 'Routing' },
  { id: 'best-practices', title: 'Best Practices' }
];
</script>

<style scoped>
.docs-nav {
  display: flex;
  gap: 8px;
  margin-bottom: 30px;
  flex-wrap: wrap;
  justify-content: center;
}

.docs-content {
  max-width: 800px;
  margin: 0 auto;
}

.docs-section {
  background: white;
  border-radius: 12px;
  padding: 30px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.docs-section h2 {
  color: var(--primary-color);
  margin-top: 0;
}

.docs-section h3 {
  color: var(--text-color);
  margin-top: 30px;
  margin-bottom: 15px;
}

.docs-section pre {
  background: #f8f9fa;
  border: 1px solid #e9ecef;
  border-radius: 6px;
  padding: 16px;
  overflow-x: auto;
  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
  font-size: 14px;
  line-height: 1.4;
}

.docs-section code {
  background: #f8f9fa;
  padding: 2px 4px;
  border-radius: 3px;
  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
  font-size: 13px;
}

.docs-section pre code {
  background: none;
  padding: 0;
}

.docs-section ul {
  padding-left: 20px;
}

.docs-section li {
  margin-bottom: 8px;
}
</style>