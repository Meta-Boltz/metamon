---
route: /docs
title: Ultra-Modern MTM Documentation
description: Complete guide to server-side rendered pages and reactive components
keywords: MTM, documentation, SSR, components, reactive
layout: default
---

// Page state
$activeSection! = signal('activeSection', 'getting-started')
$searchQuery! = signal('searchQuery', '')
$codeExamples! = signal('codeExamples', {})
  
  // Documentation sections
  $sections = [
    { id: 'getting-started', title: 'Getting Started', icon: 'üöÄ' },
    { id: 'ultra-modern-syntax', title: 'Ultra-Modern Syntax', icon: '‚ú®' },
    { id: 'ssr-pages', title: 'SSR Pages', icon: 'üèóÔ∏è' },
    { id: 'components', title: 'Components', icon: 'üß©' },
    { id: 'signals', title: 'Signals & State', icon: 'üîÑ' },
    { id: 'routing', title: 'Routing', icon: 'üõ£Ô∏è' },
    { id: 'i18n', title: 'Internationalization', icon: 'üåç' },
    { id: 'best-practices', title: 'Best Practices', icon: 'üí°' }
  ]

  // Page lifecycle
  $onMount = () => {
    signal.emit('docs-page-loaded', { 
      section: $activeSection,
      timestamp: Date.now() 
    })
  }

  // Navigation functions
  $setActiveSection = (sectionId) => {
    $activeSection = sectionId
    signal.emit('docs-section-changed', { section: sectionId })
    
    // Update URL without page reload
    if (typeof window !== 'undefined') {
      window.history.pushState({}, '', `/docs#${sectionId}`)
    }
  }

  $filterSections = (query) => {
    return $sections.filter(section => 
      section.title.toLowerCase().includes(query.toLowerCase()) ||
      section.id.includes(query.toLowerCase())
    )
  }

  <template>
    <div class="app-container">
      <header class="header">
        <h1>üìö Ultra-Modern MTM Documentation</h1>
        <p>Complete guide to server-side rendered pages and reactive components</p>
        
        <div class="docs-search">
          <input 
            type="text" 
            placeholder="Search documentation..." 
            value={$searchQuery}
            input={(e) => $searchQuery = e.target.value}
            class="input search-input"
          />
        </div>
      </header>

      <div class="docs-nav">
        {#each $filterSections($searchQuery) as section}
          <button 
            key={section.id}
            click={() => $setActiveSection(section.id)}
            class={$activeSection === section.id ? 'button' : 'button secondary'}
          >
            {section.icon} {section.title}
          </button>
        {/each}
      </div>

      <div class="docs-content">
        {#if $activeSection === 'getting-started'}
          <div class="docs-section">
            <h2>üöÄ Getting Started</h2>
            
            <h3>Installation</h3>
            <pre><code>npm install @metamon/core</code></pre>
            
            <h3>Basic Setup</h3>
            <pre><code>// vite.config.js
import { defineConfig } from 'vite';
import { mtmPlugin } from './src/mtm-plugin';

export default defineConfig({
  plugins: [
    mtmPlugin({
      include: ['**/*.mtm'],
      ssr: true
    })
  ]
});</code></pre>

            <h3>Your First Ultra-Modern .mtm Page</h3>
            <pre><code>// index.mtm - Home Page
route: /

export default function HomePage() {
  $message! = signal('welcome', 'Hello Ultra-Modern MTM!')
  $count! = signal('counter', 0)
  
  $increment = () => {
    $count++
    signal.emit('counter-updated', { value: $count })
  }
  
  &lt;template&gt;
    &lt;div&gt;
      &lt;h1&gt;{$message}&lt;/h1&gt;
      &lt;button click={$increment}&gt;Count: {$count}&lt;/button&gt;
    &lt;/div&gt;
  &lt;/template&gt;
}</code></pre>
          </div>
        {/if}

        {#if $activeSection === 'ultra-modern-syntax'}
          <div class="docs-section">
            <h2>‚ú® Ultra-Modern Syntax</h2>
            
            <h3>Reactive Variables</h3>
            <pre><code>// Reactive variable with signal
$count! = signal('globalCount', 0)

// Regular variable
$name = 'John Doe'

// Typed variable
$price: number = 199.99</code></pre>

            <h3>Functions</h3>
            <pre><code>// Arrow function
$increment = () => {
  $count++
}

// Async function
$fetchData = async (url) => {
  $response = await fetch(url)
  return $response.json()
}

// Typed function
$calculate: (a: number, b: number) => number = (a, b) => a + b</code></pre>

            <h3>Template Syntax</h3>
            <pre><code>&lt;template&gt;
  &lt;div&gt;
    {/* Variable binding */}
    &lt;h1&gt;{$title}&lt;/h1&gt;
    
    {/* Event handling */}
    &lt;button click={$handleClick}&gt;Click me&lt;/button&gt;
    
    {/* Conditional rendering */}
    {#if $isVisible}
      &lt;p&gt;This is visible&lt;/p&gt;
    {:else}
      &lt;p&gt;This is hidden&lt;/p&gt;
    {/if}
    
    {/* List rendering */}
    {#each $items as item}
      &lt;div key={item.id}&gt;{item.name}&lt;/div&gt;
    {/each}
  &lt;/div&gt;
&lt;/template&gt;</code></pre>
          </div>
        {/if}

        {#if $activeSection === 'ssr-pages'}
          <div class="docs-section">
            <h2>üèóÔ∏è Server-Side Rendered Pages</h2>
            
            <h3>Page Structure</h3>
            <pre><code>// about.mtm - About Page
route: /about

export default function AboutPage() {
  // Server-side data fetching
  $pageData! = signal('aboutData', {
    title: 'About Us',
    description: 'Learn more about our company'
  })
  
  // Lifecycle hooks
  $onMount = () => {
    console.log('Page mounted on client')
  }
  
  $onServerRender = async () => {
    // Runs only on server
    $pageData = await fetchAboutData()
  }
  
  &lt;template&gt;
    &lt;div&gt;
      &lt;h1&gt;{$pageData.title}&lt;/h1&gt;
      &lt;p&gt;{$pageData.description}&lt;/p&gt;
    &lt;/div&gt;
  &lt;/template&gt;
}</code></pre>

            <h3>Dynamic Routes</h3>
            <pre><code>// users/[id].mtm - User Profile Page
route: /users/[id]

export default function UserPage() {
  $userId = params.id
  $user! = signal(`user-${$userId}`, null)
  
  $onServerRender = async () => {
    $user = await fetchUser($userId)
  }
  
  &lt;template&gt;
    &lt;div&gt;
      {#if $user}
        &lt;h1&gt;{$user.name}&lt;/h1&gt;
        &lt;p&gt;{$user.email}&lt;/p&gt;
      {:else}
        &lt;p&gt;Loading user...&lt;/p&gt;
      {/if}
    &lt;/div&gt;
  &lt;/template&gt;
}</code></pre>

            <h3>Internationalization</h3>
            <pre><code>// Multi-language support
route: /about
route: /fr/a-propos
route: /es/acerca-de

export default function AboutPage() {
  $locale = getLocale() // 'en', 'fr', 'es'
  $t = useTranslation($locale)
  
  &lt;template&gt;
    &lt;div&gt;
      &lt;h1&gt;{$t('about.title')}&lt;/h1&gt;
      &lt;p&gt;{$t('about.description')}&lt;/p&gt;
    &lt;/div&gt;
  &lt;/template&gt;
}</code></pre>
          </div>
        {/if}

        {#if $activeSection === 'components'}
          <div class="docs-section">
            <h2>üß© Components</h2>
            
            <h3>React Component</h3>
            <pre><code>// counter.react.mtm
export default function Counter() {
  $count! = signal('counter', 0)
  
  $increment = () => $count++
  
  &lt;template&gt;
    &lt;button click={$increment}&gt;
      Count: {$count}
    &lt;/button&gt;
  &lt;/template&gt;
}</code></pre>

            <h3>Vue Component</h3>
            <pre><code>// message-board.vue.mtm
export default function MessageBoard() {
  $messages! = signal('messages', [])
  $newMessage! = signal('newMessage', '')
  
  $addMessage = () => {
    if ($newMessage.trim()) {
      $messages = [...$messages, {
        id: Date.now(),
        text: $newMessage,
        timestamp: new Date().toISOString()
      }]
      $newMessage = ''
    }
  }
  
  &lt;template&gt;
    &lt;div&gt;
      &lt;input 
        value={$newMessage}
        input={(e) => $newMessage = e.target.value}
        keyup={(e) => e.key === 'Enter' && $addMessage()}
      /&gt;
      &lt;button click={$addMessage}&gt;Send&lt;/button&gt;
      
      {#each $messages as message}
        &lt;div key={message.id}&gt;
          {message.text}
        &lt;/div&gt;
      {/each}
    &lt;/div&gt;
  &lt;/template&gt;
}</code></pre>

            <h3>Universal Component (No Framework)</h3>
            <pre><code>// theme-toggle.mtm
export default function ThemeToggle() {
  $theme! = signal('theme', 'light')
  
  $toggleTheme = () => {
    $theme = $theme === 'light' ? 'dark' : 'light'
    document.body.setAttribute('data-theme', $theme)
  }
  
  &lt;template&gt;
    &lt;button click={$toggleTheme}&gt;
      {$theme === 'light' ? 'üåô' : '‚òÄÔ∏è'} {$theme}
    &lt;/button&gt;
  &lt;/template&gt;
}</code></pre>
          </div>
        {/if}

        {#if $activeSection === 'signals'}
          <div class="docs-section">
            <h2>üîÑ Signals & State</h2>
            
            <h3>Creating Signals</h3>
            <pre><code>// Global signal
$globalCount! = signal('counter', 0)

// Local signal (component-scoped)
$localState! = signal()

// Computed signal
$doubleCount! = computed(() => $globalCount * 2)

// Async signal
$userData! = asyncSignal(async () => {
  return await fetchUserData()
})</code></pre>

            <h3>Signal Operations</h3>
            <pre><code>// Update signal
$count++
$count = $count + 1
$count = 42

// Subscribe to changes
signal.on('counter', (newValue, oldValue) => {
  console.log(`Counter changed from ${oldValue} to ${newValue}`)
})

// Emit events
signal.emit('user-action', { type: 'click', data: 'button' })

// Batch updates
signal.batch(() => {
  $count++
  $name = 'New Name'
  $isVisible = true
})</code></pre>

            <h3>Cross-Component Communication</h3>
            <pre><code>// Component A
$sendMessage = (text) => {
  signal.emit('message-sent', { text, from: 'ComponentA' })
}

// Component B
$onMount = () => {
  signal.on('message-sent', (data) => {
    console.log(`Received: ${data.text} from ${data.from}`)
  })
}</code></pre>
          </div>
        {/if}

        {#if $activeSection === 'routing'}
          <div class="docs-section">
            <h2>üõ£Ô∏è Routing</h2>
            
            <h3>File-based Routing</h3>
            <pre><code>src/pages/
  index.mtm           ‚Üí /
  about.mtm           ‚Üí /about
  contact.mtm         ‚Üí /contact
  users/
    index.mtm         ‚Üí /users
    [id].mtm          ‚Üí /users/:id
    profile.mtm       ‚Üí /users/profile
  blog/
    index.mtm         ‚Üí /blog
    [slug].mtm        ‚Üí /blog/:slug
    categories/
      [category].mtm  ‚Üí /blog/categories/:category</code></pre>

            <h3>Route Parameters</h3>
            <pre><code>// users/[id].mtm
export default function UserPage() {
  $userId = params.id
  $user! = signal(`user-${$userId}`, null)
  
  &lt;template&gt;
    &lt;h1&gt;User {$userId}&lt;/h1&gt;
  &lt;/template&gt;
}

// blog/[...slug].mtm - Catch-all routes
export default function BlogPost() {
  $slugParts = params.slug // ['category', 'subcategory', 'post-title']
  
  &lt;template&gt;
    &lt;h1&gt;Blog: {$slugParts.join(' / ')}&lt;/h1&gt;
  &lt;/template&gt;
}</code></pre>

            <h3>Navigation</h3>
            <pre><code>// Programmatic navigation
$navigateToUser = (userId) => {
  router.push(`/users/${userId}`)
}

// Link component
&lt;template&gt;
  &lt;a href="/about"&gt;About Us&lt;/a&gt;
  &lt;button click={() => router.push('/contact')}&gt;Contact&lt;/button&gt;
&lt;/template&gt;</code></pre>
          </div>
        {/if}

        {#if $activeSection === 'i18n'}
          <div class="docs-section">
            <h2>üåç Internationalization</h2>
            
            <h3>Multi-route Pages</h3>
            <pre><code>// Multi-language routing
route: /
route: /fr
route: /es

export default function HomePage() {
  $locale = getLocale() // Auto-detected from route
  $t = useTranslation($locale)
  
  &lt;template&gt;
    &lt;div&gt;
      &lt;h1&gt;{$t('home.title')}&lt;/h1&gt;
      &lt;p&gt;{$t('home.welcome')}&lt;/p&gt;
    &lt;/div&gt;
  &lt;/template&gt;
}</code></pre>

            <h3>Translation Files</h3>
            <pre><code>// locales/en.json
{
  "home": {
    "title": "Welcome",
    "welcome": "Welcome to our website"
  }
}

// locales/fr.json
{
  "home": {
    "title": "Bienvenue",
    "welcome": "Bienvenue sur notre site web"
  }
}</code></pre>

            <h3>Dynamic Translations</h3>
            <pre><code>$userName = 'John'
$greeting = $t('greeting', { name: $userName })

// Translation with parameters
// en: "Hello, {{name}}!"
// fr: "Bonjour, {{name}} !"</code></pre>
          </div>
        {/if}

        {#if $activeSection === 'best-practices'}
          <div class="docs-section">
            <h2>üí° Best Practices</h2>
            
            <h3>Project Structure</h3>
            <pre><code>src/
  pages/              # SSR pages
    index.mtm
    about.mtm
    users/
      [id].mtm
  components/         # Reusable components
    ui/
      button.react.mtm
      input.vue.mtm
    forms/
      contact-form.svelte.mtm
  shared/
    signals.js        # Global signals
    utils.js          # Utilities
  locales/            # Translation files
    en.json
    fr.json
  styles/
    global.css</code></pre>

            <h3>Signal Management</h3>
            <ul>
              <li>Use descriptive names for global signals</li>
              <li>Initialize signals with sensible defaults</li>
              <li>Prefer local state for component-specific data</li>
              <li>Use computed signals for derived state</li>
              <li>Clean up event listeners in component cleanup</li>
            </ul>

            <h3>Performance Tips</h3>
            <ul>
              <li>Use SSR for better initial page load</li>
              <li>Batch signal updates when possible</li>
              <li>Avoid excessive event emissions</li>
              <li>Use framework-specific components when needed</li>
              <li>Leverage browser caching for static assets</li>
            </ul>

            <h3>Code Organization</h3>
            <ul>
              <li>Keep pages simple and focused</li>
              <li>Extract complex logic into utility functions</li>
              <li>Use consistent naming conventions</li>
              <li>Document your signal contracts</li>
              <li>Test components in isolation</li>
            </ul>
          </div>
        {/if}
      </div>
    </div>
  </template>