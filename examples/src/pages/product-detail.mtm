---
function: ProductDetailPage
useLayout: "ecommerce"
title: "Product Details - MTM Store"
description: "View detailed product information and reviews"
breadcrumb: "Product Details"
---

<template>
  <div class="container mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Loading State -->
    <div id="loading-state" class="hidden">
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-12">
        <div class="animate-pulse">
          <div class="w-full h-96 bg-gray-200 rounded-lg mb-4"></div>
          <div class="grid grid-cols-4 gap-2">
            <div class="h-20 bg-gray-200 rounded"></div>
            <div class="h-20 bg-gray-200 rounded"></div>
            <div class="h-20 bg-gray-200 rounded"></div>
            <div class="h-20 bg-gray-200 rounded"></div>
          </div>
        </div>
        <div class="animate-pulse">
          <div class="h-8 bg-gray-200 rounded mb-4"></div>
          <div class="h-6 bg-gray-200 rounded w-3/4 mb-4"></div>
          <div class="h-10 bg-gray-200 rounded w-1/4 mb-6"></div>
          <div class="h-4 bg-gray-200 rounded mb-2"></div>
          <div class="h-4 bg-gray-200 rounded mb-2"></div>
          <div class="h-4 bg-gray-200 rounded w-2/3 mb-6"></div>
          <div class="h-12 bg-gray-200 rounded"></div>
        </div>
      </div>
    </div>

    <!-- Product Content -->
    <div id="product-content" class="hidden">
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-12">
        <!-- Product Images -->
        <div>
          <div class="mb-4">
            <img 
              id="main-image" 
              src="" 
              alt="" 
              class="w-full h-96 object-cover rounded-lg shadow-lg"
            />
          </div>
          
          <!-- Thumbnail Images -->
          <div id="thumbnail-container" class="grid grid-cols-4 gap-2">
            <!-- Thumbnails will be populated here -->
          </div>
        </div>

        <!-- Product Info -->
        <div>
          <div class="mb-6">
            <h1 id="product-name" class="text-3xl font-bold text-gray-900 mb-2"></h1>
            
            <div class="flex items-center mb-4">
              <div id="product-rating" class="flex items-center">
                <!-- Rating stars will be populated here -->
              </div>
              <span id="product-reviews" class="text-gray-500 ml-2"></span>
            </div>
            
            <div class="flex items-center mb-6">
              <span id="product-price" class="text-3xl font-bold text-gray-900"></span>
              <span id="product-original-price" class="text-xl text-gray-500 line-through ml-3 hidden"></span>
              <span id="product-discount" class="bg-red-100 text-red-800 text-sm font-medium px-2 py-1 rounded ml-3 hidden"></span>
            </div>
          </div>

          <!-- Product Options -->
          <div class="mb-6">
            <!-- Color Selection -->
            <div id="color-selection" class="mb-4 hidden">
              <h3 class="text-sm font-medium text-gray-900 mb-2">Color</h3>
              <div id="color-options" class="flex space-x-2">
                <!-- Color options will be populated here -->
              </div>
            </div>

            <!-- Size Selection -->
            <div id="size-selection" class="mb-4 hidden">
              <h3 class="text-sm font-medium text-gray-900 mb-2">Size</h3>
              <div id="size-options" class="flex space-x-2">
                <!-- Size options will be populated here -->
              </div>
            </div>

            <!-- Quantity Selection -->
            <div class="mb-6">
              <h3 class="text-sm font-medium text-gray-900 mb-2">Quantity</h3>
              <div class="flex items-center space-x-3">
                <button onclick="updateQuantity(-1)" class="w-10 h-10 bg-gray-200 rounded-lg hover:bg-gray-300 transition-colors">
                  <svg class="w-4 h-4 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path>
                  </svg>
                </button>
                <span id="quantity-display" class="text-lg font-medium w-12 text-center">1</span>
                <button onclick="updateQuantity(1)" class="w-10 h-10 bg-gray-200 rounded-lg hover:bg-gray-300 transition-colors">
                  <svg class="w-4 h-4 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                  </svg>
                </button>
              </div>
            </div>
          </div>

          <!-- Action Buttons -->
          <div class="flex space-x-4 mb-8">
            <button 
              onclick="addToCartFromDetail()"
              class="flex-1 bg-blue-600 text-white py-3 px-6 rounded-lg hover:bg-blue-700 transition-colors font-semibold"
            >
              Add to Cart
            </button>
            <button 
              onclick="addToWishlistFromDetail()"
              class="w-12 h-12 border-2 border-gray-300 rounded-lg hover:border-red-500 hover:text-red-500 transition-colors flex items-center justify-center"
            >
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
              </svg>
            </button>
          </div>

          <!-- Product Features -->
          <div class="border-t pt-6">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Product Features</h3>
            <ul id="product-features" class="space-y-2">
              <!-- Features will be populated here -->
            </ul>
          </div>
        </div>
      </div>

      <!-- Product Tabs -->
      <div class="mt-16">
        <div class="border-b border-gray-200">
          <nav class="-mb-px flex space-x-8">
            <button 
              onclick="switchTab('description')"
              id="description-tab"
              class="py-2 px-1 border-b-2 border-blue-600 font-medium text-sm text-blue-600"
            >
              Description
            </button>
            <button 
              onclick="switchTab('specifications')"
              id="specifications-tab"
              class="py-2 px-1 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700 hover:border-gray-300"
            >
              Specifications
            </button>
            <button 
              onclick="switchTab('reviews')"
              id="reviews-tab"
              class="py-2 px-1 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700 hover:border-gray-300"
            >
              Reviews
            </button>
          </nav>
        </div>

        <!-- Tab Content -->
        <div class="mt-8">
          <div id="description-content" class="tab-content">
            <div class="prose max-w-none">
              <p id="product-description" class="text-gray-600 leading-relaxed"></p>
            </div>
          </div>

          <div id="specifications-content" class="tab-content hidden">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div id="specifications-list">
                <!-- Specifications will be populated here -->
              </div>
            </div>
          </div>

          <div id="reviews-content" class="tab-content hidden">
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
              <!-- Reviews Summary -->
              <div class="lg:col-span-1">
                <div class="bg-gray-50 rounded-lg p-6">
                  <h3 class="text-lg font-semibold mb-4">Customer Reviews</h3>
                  <div class="text-center mb-4">
                    <div id="average-rating" class="text-3xl font-bold text-gray-900 mb-1"></div>
                    <div id="rating-stars" class="flex justify-center mb-2">
                      <!-- Rating stars will be populated here -->
                    </div>
                    <div id="total-reviews" class="text-sm text-gray-500"></div>
                  </div>
                  
                  <div id="rating-breakdown" class="space-y-2">
                    <!-- Rating breakdown will be populated here -->
                  </div>
                </div>
              </div>

              <!-- Reviews List -->
              <div class="lg:col-span-2">
                <div id="reviews-list">
                  <!-- Reviews will be populated here -->
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Related Products -->
      <div class="mt-16">
        <h2 class="text-2xl font-bold text-gray-900 mb-8">Related Products</h2>
        <div id="related-products" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
          <!-- Related products will be populated here -->
        </div>
      </div>
    </div>
  </div>
</template>

// Product detail page state and functions
$product! = signal('product', null)
$quantity! = signal('quantity', 1)
$selectedColor! = signal('selectedColor', null)
$selectedSize! = signal('selectedSize', null)
$activeTab! = signal('activeTab', 'description')
$loading! = signal('loading', true)

// Initialize page
$init = () => {
  // Get product ID from URL (in a real app, this would come from routing)
  const productId = getProductIdFromUrl()
  loadProduct(productId)
}

// Load product data
$loadProduct = async (productId) => {
  $loading.value = true
  document.getElementById('loading-state').classList.remove('hidden')
  document.getElementById('product-content').classList.add('hidden')
  
  try {
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 1500))
    
    // Sample product data (in a real app, this would come from an API)
    $product.value = {
      id: productId,
      name: "Premium Wireless Bluetooth Headphones",
      price: 199.99,
      originalPrice: 249.99,
      discount: 20,
      rating: 4.6,
      reviews: 234,
      images: [
        "https://images.unsplash.com/photo-1505740420928-5e560c06d30e?w=600&h=600&fit=crop",
        "https://images.unsplash.com/photo-1484704849700-f032a568e944?w=600&h=600&fit=crop",
        "https://images.unsplash.com/photo-1487215078519-e21cc028cb29?w=600&h=600&fit=crop",
        "https://images.unsplash.com/photo-1583394838336-acd977736f90?w=600&h=600&fit=crop"
      ],
      colors: [
        { name: 'Black', value: '#000000' },
        { name: 'White', value: '#FFFFFF' },
        { name: 'Blue', value: '#3B82F6' }
      ],
      sizes: ['Small', 'Medium', 'Large'],
      description: `
        Experience premium audio quality with these state-of-the-art wireless Bluetooth headphones. 
        Featuring advanced noise cancellation technology, superior comfort, and exceptional battery life, 
        these headphones are perfect for music lovers, professionals, and anyone who demands the best in audio experience.
        
        The ergonomic design ensures comfortable wear for extended periods, while the premium materials 
        provide durability and style. With intuitive touch controls and seamless device connectivity, 
        these headphones represent the perfect blend of technology and design.
      `,
      features: [
        'Active Noise Cancellation',
        '30-hour battery life',
        'Quick charge: 5 min = 3 hours',
        'Premium leather ear cushions',
        'Bluetooth 5.0 connectivity',
        'Built-in microphone',
        'Foldable design',
        '2-year warranty'
      ],
      specifications: {
        'Driver Size': '40mm',
        'Frequency Response': '20Hz - 20kHz',
        'Impedance': '32 Ohm',
        'Sensitivity': '105 dB',
        'Battery Life': '30 hours',
        'Charging Time': '2 hours',
        'Weight': '250g',
        'Connectivity': 'Bluetooth 5.0, 3.5mm jack'
      },
      reviews: [
        {
          id: 1,
          author: 'Sarah Johnson',
          rating: 5,
          date: '2024-01-15',
          title: 'Excellent sound quality!',
          content: 'These headphones exceeded my expectations. The sound quality is crystal clear and the noise cancellation works perfectly.'
        },
        {
          id: 2,
          author: 'Mike Chen',
          rating: 4,
          date: '2024-01-10',
          title: 'Great for work calls',
          content: 'Very comfortable for long work sessions. The microphone quality is excellent for video calls.'
        },
        {
          id: 3,
          author: 'Emily Davis',
          rating: 5,
          date: '2024-01-05',
          title: 'Worth every penny',
          content: 'Premium build quality and amazing battery life. Highly recommend for anyone serious about audio.'
        }
      ]
    }
    
    // Set default selections
    if ($product.value.colors && $product.value.colors.length > 0) {
      $selectedColor.value = $product.value.colors[0].name
    }
    if ($product.value.sizes && $product.value.sizes.length > 0) {
      $selectedSize.value = $product.value.sizes[0]
    }
    
    renderProduct()
    loadRelatedProducts()
  } catch (error) {
    console.error('Failed to load product:', error)
    showNotification('Failed to load product', 'error')
  } finally {
    $loading.value = false
    document.getElementById('loading-state').classList.add('hidden')
    document.getElementById('product-content').classList.remove('hidden')
  }
}

$renderProduct = () => {
  if (!$product.value) return
  
  const product = $product.value
  
  // Update product info
  document.getElementById('product-name').textContent = product.name
  document.getElementById('product-price').textContent = `$${product.price}`
  
  if (product.originalPrice && product.originalPrice > product.price) {
    document.getElementById('product-original-price').textContent = `$${product.originalPrice}`
    document.getElementById('product-original-price').classList.remove('hidden')
    document.getElementById('product-discount').textContent = `${product.discount}% OFF`
    document.getElementById('product-discount').classList.remove('hidden')
  }
  
  // Update rating
  const ratingContainer = document.getElementById('product-rating')
  ratingContainer.innerHTML = Array(5).fill(0).map((_, i) => `
    <svg class="w-5 h-5 ${i < Math.floor(product.rating) ? 'text-yellow-400' : 'text-gray-300'}" fill="currentColor" viewBox="0 0 20 20">
      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
    </svg>
  `).join('')
  
  document.getElementById('product-reviews').textContent = `(${product.reviews.length} reviews)`
  
  // Update images
  if (product.images && product.images.length > 0) {
    const mainImage = document.getElementById('main-image')
    mainImage.src = product.images[0]
    mainImage.alt = product.name
    
    const thumbnailContainer = document.getElementById('thumbnail-container')
    thumbnailContainer.innerHTML = product.images.map((image, index) => `
      <img 
        src="${image}" 
        alt="${product.name} ${index + 1}"
        class="w-full h-20 object-cover rounded cursor-pointer hover:opacity-75 transition-opacity ${index === 0 ? 'ring-2 ring-blue-500' : ''}"
        onclick="selectImage(${index})"
      />
    `).join('')
  }
  
  // Update color options
  if (product.colors && product.colors.length > 0) {
    document.getElementById('color-selection').classList.remove('hidden')
    const colorOptions = document.getElementById('color-options')
    colorOptions.innerHTML = product.colors.map(color => `
      <button 
        onclick="selectColor('${color.name}')"
        class="w-8 h-8 rounded-full border-2 ${$selectedColor.value === color.name ? 'border-gray-900' : 'border-gray-300'}"
        style="background-color: ${color.value}"
        title="${color.name}"
      ></button>
    `).join('')
  }
  
  // Update size options
  if (product.sizes && product.sizes.length > 0) {
    document.getElementById('size-selection').classList.remove('hidden')
    const sizeOptions = document.getElementById('size-options')
    sizeOptions.innerHTML = product.sizes.map(size => `
      <button 
        onclick="selectSize('${size}')"
        class="px-4 py-2 border rounded-lg ${$selectedSize.value === size ? 'border-blue-500 bg-blue-50 text-blue-600' : 'border-gray-300 hover:border-gray-400'}"
      >
        ${size}
      </button>
    `).join('')
  }
  
  // Update features
  const featuresContainer = document.getElementById('product-features')
  featuresContainer.innerHTML = product.features.map(feature => `
    <li class="flex items-center">
      <svg class="w-4 h-4 text-green-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
      </svg>
      ${feature}
    </li>
  `).join('')
  
  // Update description
  document.getElementById('product-description').textContent = product.description
  
  // Update specifications
  const specificationsContainer = document.getElementById('specifications-list')
  specificationsContainer.innerHTML = Object.entries(product.specifications).map(([key, value]) => `
    <div class="flex justify-between py-2 border-b border-gray-200">
      <span class="font-medium text-gray-900">${key}:</span>
      <span class="text-gray-600">${value}</span>
    </div>
  `).join('')
  
  renderReviews()
}

$renderReviews = () => {
  if (!$product.value || !$product.value.reviews) return
  
  const reviews = $product.value.reviews
  const avgRating = reviews.reduce((sum, review) => sum + review.rating, 0) / reviews.length
  
  // Update average rating
  document.getElementById('average-rating').textContent = avgRating.toFixed(1)
  document.getElementById('total-reviews').textContent = `Based on ${reviews.length} reviews`
  
  // Update rating stars
  const ratingStars = document.getElementById('rating-stars')
  ratingStars.innerHTML = Array(5).fill(0).map((_, i) => `
    <svg class="w-5 h-5 ${i < Math.floor(avgRating) ? 'text-yellow-400' : 'text-gray-300'}" fill="currentColor" viewBox="0 0 20 20">
      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
    </svg>
  `).join('')
  
  // Update rating breakdown
  const ratingBreakdown = document.getElementById('rating-breakdown')
  const ratingCounts = [5, 4, 3, 2, 1].map(rating => ({
    rating,
    count: reviews.filter(r => r.rating === rating).length
  }))
  
  ratingBreakdown.innerHTML = ratingCounts.map(({ rating, count }) => {
    const percentage = reviews.length > 0 ? (count / reviews.length) * 100 : 0
    return `
      <div class="flex items-center">
        <span class="text-sm text-gray-600 w-8">${rating}★</span>
        <div class="flex-1 mx-2 bg-gray-200 rounded-full h-2">
          <div class="bg-yellow-400 h-2 rounded-full" style="width: ${percentage}%"></div>
        </div>
        <span class="text-sm text-gray-600 w-8">${count}</span>
      </div>
    `
  }).join('')
  
  // Update reviews list
  const reviewsList = document.getElementById('reviews-list')
  reviewsList.innerHTML = reviews.map(review => `
    <div class="border-b border-gray-200 pb-6 mb-6">
      <div class="flex items-center justify-between mb-2">
        <div class="flex items-center">
          <div class="w-10 h-10 bg-gray-300 rounded-full flex items-center justify-center">
            <span class="text-sm font-medium text-gray-700">${review.author.charAt(0)}</span>
          </div>
          <div class="ml-3">
            <p class="text-sm font-medium text-gray-900">${review.author}</p>
            <p class="text-xs text-gray-500">${new Date(review.date).toLocaleDateString()}</p>
          </div>
        </div>
        <div class="flex items-center">
          ${Array(5).fill(0).map((_, i) => `
            <svg class="w-4 h-4 ${i < review.rating ? 'text-yellow-400' : 'text-gray-300'}" fill="currentColor" viewBox="0 0 20 20">
              <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
            </svg>
          `).join('')}
        </div>
      </div>
      <h4 class="font-medium text-gray-900 mb-2">${review.title}</h4>
      <p class="text-gray-600">${review.content}</p>
    </div>
  `).join('')
}

$loadRelatedProducts = async () => {
  // Simulate loading related products
  const relatedProducts = [
    {
      id: 2,
      name: "Smart Watch",
      price: 299.99,
      image: "https://images.unsplash.com/photo-1523275335684-37898b6baf30?w=300&h=300&fit=crop",
      rating: 4.8
    },
    {
      id: 3,
      name: "Wireless Earbuds",
      price: 149.99,
      image: "https://images.unsplash.com/photo-1590658268037-6bf12165a8df?w=300&h=300&fit=crop",
      rating: 4.5
    },
    {
      id: 4,
      name: "Bluetooth Speaker",
      price: 89.99,
      image: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=300&h=300&fit=crop",
      rating: 4.3
    },
    {
      id: 5,
      name: "Phone Stand",
      price: 24.99,
      image: "https://images.unsplash.com/photo-1556656793-08538906a9f8?w=300&h=300&fit=crop",
      rating: 4.6
    }
  ]
  
  const container = document.getElementById('related-products')
  container.innerHTML = relatedProducts.map(product => `
    <div class="bg-white rounded-xl shadow-sm overflow-hidden hover:shadow-lg transition-shadow duration-300 group">
      <div class="relative overflow-hidden">
        <img 
          src="${product.image}" 
          alt="${product.name}"
          class="w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300"
        />
      </div>
      
      <div class="p-4">
        <h3 class="font-semibold text-gray-900 mb-2 group-hover:text-blue-600 transition-colors">
          <a href="/product/${product.id}">${product.name}</a>
        </h3>
        
        <div class="flex items-center mb-3">
          <div class="flex items-center">
            ${Array(5).fill(0).map((_, i) => `
              <svg class="w-4 h-4 ${i < Math.floor(product.rating) ? 'text-yellow-400' : 'text-gray-300'}" fill="currentColor" viewBox="0 0 20 20">
                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
              </svg>
            `).join('')}
          </div>
        </div>
        
        <div class="flex items-center justify-between">
          <span class="text-lg font-bold text-gray-900">$${product.price}</span>
          <button 
            onclick="addToCart(${JSON.stringify(product).replace(/"/g, '&quot;')})"
            class="bg-blue-600 text-white px-3 py-1 rounded text-sm hover:bg-blue-700 transition-colors"
          >
            Add to Cart
          </button>
        </div>
      </div>
    </div>
  `).join('')
}

// Event handlers
$selectImage = (index) => {
  if (!$product.value || !$product.value.images) return
  
  const mainImage = document.getElementById('main-image')
  mainImage.src = $product.value.images[index]
  
  // Update thumbnail selection
  const thumbnails = document.querySelectorAll('#thumbnail-container img')
  thumbnails.forEach((thumb, i) => {
    if (i === index) {
      thumb.classList.add('ring-2', 'ring-blue-500')
    } else {
      thumb.classList.remove('ring-2', 'ring-blue-500')
    }
  })
}

$selectColor = (color) => {
  $selectedColor.value = color
  renderProduct()
}

$selectSize = (size) => {
  $selectedSize.value = size
  renderProduct()
}

$updateQuantity = (change) => {
  const newQuantity = $quantity.value + change
  if (newQuantity >= 1) {
    $quantity.value = newQuantity
    document.getElementById('quantity-display').textContent = $quantity.value
  }
}

$switchTab = (tab) => {
  $activeTab.value = tab
  
  // Update tab buttons
  document.querySelectorAll('[id$="-tab"]').forEach(button => {
    button.classList.remove('border-blue-600', 'text-blue-600')
    button.classList.add('border-transparent', 'text-gray-500')
  })
  
  document.getElementById(`${tab}-tab`).classList.remove('border-transparent', 'text-gray-500')
  document.getElementById(`${tab}-tab`).classList.add('border-blue-600', 'text-blue-600')
  
  // Update tab content
  document.querySelectorAll('.tab-content').forEach(content => {
    content.classList.add('hidden')
  })
  
  document.getElementById(`${tab}-content`).classList.remove('hidden')
}

$addToCartFromDetail = () => {
  if (!$product.value) return
  
  const productToAdd = {
    ...$product.value,
    quantity: $quantity.value,
    selectedColor: $selectedColor.value,
    selectedSize: $selectedSize.value
  }
  
  addToCart(productToAdd)
  showNotification(`${$product.value.name} added to cart!`, 'success')
}

$addToWishlistFromDetail = () => {
  if (!$product.value) return
  
  showNotification(`${$product.value.name} added to wishlist!`, 'success')
}

$getProductIdFromUrl = () => {
  // In a real app, this would extract the ID from the URL
  // For demo purposes, return a default ID
  return 1
}

// Make functions globally available
window.selectImage = $selectImage
window.selectColor = $selectColor
window.selectSize = $selectSize
window.updateQuantity = $updateQuantity
window.switchTab = $switchTab
window.addToCartFromDetail = $addToCartFromDetail
window.addToWishlistFromDetail = $addToWishlistFromDetail