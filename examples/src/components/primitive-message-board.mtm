---
target: vue
channels:
  - event: message-sent
    emit: onMessageSent
---

// Primitive message board using universal patterns
export default function MessageBoard() {
  const messages = useSignal('messages', []);
  const newMessage = useSignal('newMessage', '');
  const { emit, subscribe } = usePubSub();
  
  // Listen for cross-framework events
  subscribe('user-action', (data) => {
    if (data.framework !== 'Vue') {
      const systemMessage = {
        id: Date.now(),
        text: `${data.framework} performed: ${data.action}`,
        framework: data.framework,
        timestamp: Date.now()
      };
      messages.update([...messages.value, systemMessage]);
    }
  });
  
  const sendMessage = () => {
    if (!newMessage.value.trim()) return;
    
    const message = {
      id: Date.now(),
      text: newMessage.value,
      framework: 'Vue',
      timestamp: Date.now()
    };
    
    messages.update([...messages.value, message]);
    emit('message-sent', message);
    newMessage.update('');
  };
  
  return template(`
    <div class="message-board">
      <div class="message-input">
        <input 
          value="{{newMessage.value}}" 
          oninput="{{(e) => newMessage.update(e.target.value)}}"
          onkeyup="{{(e) => e.key === 'Enter' && sendMessage()}}"
          placeholder="Type a message..."
        />
        <button onclick="{{sendMessage}}" disabled="{{!newMessage.value.trim()}}">
          Send
        </button>
      </div>
      
      <div class="message-list">
        {{#each messages.value as message}}
          <div class="message-item" key="{{message.id}}">
            <strong>{{message.text}}</strong>
            <small>{{message.framework}} - {{formatTime(message.timestamp)}}</small>
          </div>
        {{/each}}
      </div>
    </div>
  `);
}

function formatTime(timestamp) {
  return new Date(timestamp).toLocaleTimeString();
}