---
target: reactjs
channels:
  - event: counter-updated
    emit: onCounterUpdate
  - event: user-action
    emit: onUserAction
---

export default function ReactCounter() {
  // Modern MTM syntax with $ prefix and reactive variables
  $userCount! = useSignal('userCount', 0)
  $localCount! = 0
  
  // Simplified function syntax with automatic type inference
  $incrementGlobal = () => {
    $userCount++
    emit('counter-updated', { 
      framework: 'React', 
      value: $userCount,
      timestamp: Date.now()
    })
    emit('user-action', {
      action: 'increment_global',
      framework: 'React',
      data: { newValue: $userCount }
    })
  }

  $incrementLocal = () => {
    $localCount++
    emit('user-action', {
      action: 'increment_local',
      framework: 'React',
      data: { newValue: $localCount }
    })
  }

  $reset = () => {
    $userCount = 0
    $localCount = 0
    emit('counter-updated', { 
      framework: 'React', 
      value: 0,
      timestamp: Date.now()
    })
    emit('user-action', {
      action: 'reset_counters',
      framework: 'React'
    })
  }

  return template(`
    <div class="component-demo">
      <div class="counter">
        <span>Global Count:</span>
        <span class="counter-value">{{$userCount}}</span>
        <button class="button" click="{{$incrementGlobal}}">
          +1 Global
        </button>
      </div>
      
      <div class="counter">
        <span>Local Count:</span>
        <span class="counter-value">{{$localCount}}</span>
        <button class="button secondary" click="{{$incrementLocal}}">
          +1 Local
        </button>
      </div>

      <button class="button" click="{{$reset}}" style="margin-top: 10px;">
        Reset All
      </button>

      <div style="margin-top: 10px; font-size: 12px; color: #666;">
        Global count is shared across all frameworks via signals.
        Local count demonstrates React-specific state.
      </div>
    </div>
  `)
}