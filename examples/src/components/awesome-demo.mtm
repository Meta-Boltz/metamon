// ðŸŽ¯ METAMON - Write once, use everywhere!
// Import any framework components - they just work together

import ReactCounter from './ReactCounter.jsx';
import VueMessageBoard from './VueMessageBoard.vue';
import SvelteUserList from './SvelteUserList.svelte';

export default function AwesomeDemo() {
  // ðŸ”¥ Universal state - shared across all frameworks
  const count = signal('globalCount', 0);
  const messages = signal('messages', []);
  const theme = signal('theme', 'light');
  
  // ðŸ“¡ Universal events - cross-framework communication
  const { emit, on } = events();
  
  // ðŸŽ¨ Event handlers
  const handleIncrement = () => {
    count.set(count.get() + 1);
    emit('count-changed', { value: count.get(), framework: 'Universal' });
  };
  
  const handleThemeToggle = () => {
    const newTheme = theme.get() === 'light' ? 'dark' : 'light';
    theme.set(newTheme);
    emit('theme-changed', { theme: newTheme });
  };
  
  // ðŸŽ‰ Just return JSX - it works with any framework components!
  return (
    <div className={`app theme-${theme.get()}`}>
      <header>
        <h1>ðŸš€ Metamon Universal Demo</h1>
        <button onClick={handleThemeToggle}>
          Theme: {theme.get()}
        </button>
      </header>
      
      <main className="framework-grid">
        {/* React component - works seamlessly */}
        <ReactCounter 
          count={count.get()} 
          onIncrement={handleIncrement}
        />
        
        {/* Vue component - just works */}
        <VueMessageBoard 
          messages={messages.get()}
          onMessageSent={(msg) => {
            messages.set([...messages.get(), msg]);
            emit('message-sent', msg);
          }}
        />
        
        {/* Svelte component - perfect integration */}
        <SvelteUserList 
          userCount={count.get()}
          onUserAdded={(user) => {
            count.set(count.get() + 1);
            emit('user-added', user);
          }}
        />
      </main>
      
      <footer>
        <p>
          ðŸŽ¯ Count: {count.get()} | 
          ðŸ’¬ Messages: {messages.get().length} | 
          ðŸŽ¨ Theme: {theme.get()}
        </p>
      </footer>
    </div>
  );
}

// ðŸŽµ Universal lifecycle - works everywhere
onMount(() => {
  console.log('ðŸš€ Universal component mounted!');
  emit('app-ready', { timestamp: Date.now() });
});

onDestroy(() => {
  console.log('ðŸ‘‹ Universal component destroyed!');
});