---
title: "MTM Theme Toggle Component"
description: "Native MTM reactive theme toggle component"
compileJsMode: "inline"
---

// MTM Theme Toggle Component - Pure MTM reactive syntax
$currentTheme! = signal('currentTheme', 'light')
$systemTheme! = signal('systemTheme', 'light')

// Theme configurations
$themes! = signal('themes', {
  light: {
    name: 'Light',
    icon: '‚òÄÔ∏è',
    colors: {
      background: '#ffffff',
      text: '#333333',
      accent: '#9b59b6'
    }
  },
  dark: {
    name: 'Dark',
    icon: 'üåô',
    colors: {
      background: '#2c3e50',
      text: '#ecf0f1',
      accent: '#3498db'
    }
  },
  auto: {
    name: 'Auto',
    icon: 'üîÑ',
    colors: {
      background: '#f8f9fa',
      text: '#333333',
      accent: '#9b59b6'
    }
  }
})

// Computed values
$activeTheme! = computed(() => {
  if ($currentTheme === 'auto') {
    return $systemTheme === 'dark' ? $themes.dark : $themes.light
  }
  return $themes[$currentTheme]
})

// Component methods using MTM syntax
$toggleTheme = () => {
  const themeKeys = Object.keys($themes)
  const currentIndex = themeKeys.indexOf($currentTheme)
  const nextIndex = (currentIndex + 1) % themeKeys.length
  $currentTheme = themeKeys[nextIndex]
  $applyTheme()
}

$setTheme = (theme) => {
  if ($themes[theme]) {
    $currentTheme = theme
    $applyTheme()
  }
}

$applyTheme = () => {
  const theme = $activeTheme
  const component = document.querySelector('.mtm-theme-component')
  if (component) {
    component.style.backgroundColor = theme.colors.background
    component.style.color = theme.colors.text
    component.style.borderColor = theme.colors.accent
  }
  
  // Emit theme change event
  console.log('Theme changed to:', $currentTheme, theme)
}

$detectSystemTheme = () => {
  $systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
}

// Initialize component
$init = (props = {}) => {
  $currentTheme = props.initialTheme || 'light'
  $detectSystemTheme()
  
  // Listen for system theme changes
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
    $detectSystemTheme()
    if ($currentTheme === 'auto') {
      $applyTheme()
    }
  })
  
  // Apply initial theme
  setTimeout($applyTheme, 100)
}

<template>
  <div class="mtm-theme-component">
    <h4>Native MTM Theme Toggle</h4>
    
    <div class="theme-display">
      <span class="theme-icon">{$activeTheme.icon}</span>
      <span>Current theme: <strong>{$activeTheme.name}</strong></span>
    </div>
    
    <div class="theme-controls">
      <button onclick={$toggleTheme} class="theme-toggle-btn">
        Toggle Theme
      </button>
    </div>
    
    <div class="theme-options">
      <button onclick={() => $setTheme('light')} class="theme-option-btn">
        ‚òÄÔ∏è Light
      </button>
      <button onclick={() => $setTheme('dark')} class="theme-option-btn">
        üåô Dark
      </button>
      <button onclick={() => $setTheme('auto')} class="theme-option-btn">
        üîÑ Auto
      </button>
    </div>
    
    <div class="theme-preview">
      <div class="preview-box" style="background: {$activeTheme.colors.background}; color: {$activeTheme.colors.text}; border: 2px solid {$activeTheme.colors.accent};">
        <p>Theme Preview</p>
        <small>Background: {$activeTheme.colors.background}</small><br>
        <small>Text: {$activeTheme.colors.text}</small><br>
        <small>Accent: {$activeTheme.colors.accent}</small>
      </div>
    </div>
    
    <p class="component-info">
      This is a native MTM theme toggle with system preference detection
    </p>
  </div>
</template>

<style>
  .mtm-theme-component {
    background: white;
    border-radius: 8px;
    padding: 1.5rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    border: 1px solid #e1e5e9;
    transition: all 0.3s ease;
  }

  .mtm-theme-component h4 {
    margin: 0 0 1rem;
    color: #2c3e50;
  }

  .theme-display {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1rem;
    padding: 1rem;
    background: #f8f9fa;
    border-radius: 6px;
  }

  .theme-icon {
    font-size: 2rem;
  }

  .theme-controls {
    margin-bottom: 1rem;
    text-align: center;
  }

  .theme-toggle-btn {
    background: #9b59b6;
    color: white;
    border: none;
    border-radius: 4px;
    padding: 0.75rem 1.5rem;
    cursor: pointer;
    font-weight: 600;
    transition: background 0.2s;
  }

  .theme-toggle-btn:hover {
    background: #8e44ad;
  }

  .theme-options {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
    justify-content: center;
    margin-bottom: 1rem;
  }

  .theme-option-btn {
    background: #f8f9fa;
    border: 1px solid #e1e5e9;
    border-radius: 4px;
    padding: 0.5rem 1rem;
    cursor: pointer;
    transition: all 0.2s;
    font-size: 0.9rem;
  }

  .theme-option-btn:hover {
    background: #e9ecef;
    border-color: #9b59b6;
  }

  .theme-preview {
    margin-bottom: 1rem;
  }

  .preview-box {
    padding: 1rem;
    border-radius: 6px;
    text-align: center;
    transition: all 0.3s ease;
  }

  .preview-box p {
    margin: 0 0 0.5rem;
    font-weight: 600;
  }

  .preview-box small {
    font-size: 0.8rem;
    opacity: 0.8;
  }

  .component-info {
    margin-top: 1rem;
    color: #666;
    font-size: 0.9rem;
    font-style: italic;
  }
</style>