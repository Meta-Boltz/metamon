// ðŸš€ MODERN MTM SYNTAX - Now Implemented!

---
target: reactjs
---

export default function ModernMTMSyntax() {
  // âœ¨ Modern MTM Syntax Features:
  
  // 1. $ prefix for variables with automatic type inference
  $count! = 0                    // Reactive variable (number inferred)
  $name: string = "MTM"          // Explicit type annotation
  $users! = []                   // Reactive array
  $theme! = 'light'              // Reactive string
  
  // 2. Simplified function syntax with automatic this binding
  $increment = () => {
    $count++                     // Direct reactive variable update
    emit('count-changed', $count)
  }
  
  $addUser = ($userName: string) => {
    $user = {
      id: Date.now(),
      name: $userName,
      timestamp: Date.now()
    }
    $users = [...$users, $user]
  }
  
  $toggleTheme = () => {
    $theme = $theme === 'light' ? 'dark' : 'light'
  }
  
  // Initialize missing reactive variable
  $newUserName! = ''
  
  // 3. Clean template syntax with automatic data binding
  return template(`
    <div class="modern-mtm-demo" data-theme="{{$theme}}">
      <h2>ðŸš€ Modern MTM Syntax Demo</h2>
      
      <!-- Variable interpolation -->
      <div class="counter">
        <h3>Hello, {{$name}}!</h3>
        <p>Count: <strong>{{$count}}</strong></p>
        <button click="{{$increment}}" class="button">
          Increment Counter
        </button>
      </div>
      
      <!-- Event handlers with inline functions -->
      <div class="user-section">
        <input 
          value="{{$newUserName}}"
          input="{{(e) => $newUserName = e.target.value}}"
          placeholder="Enter user name..."
          class="input"
        />
        <button 
          click="{{() => $addUser($newUserName)}}" 
          class="button"
          disabled="{{!$newUserName}}"
        >
          Add User
        </button>
      </div>
      
      <!-- Conditional rendering -->
      {{#if $users.length > 0}}
        <div class="user-list">
          <h4>Users ({{$users.length}}):</h4>
          {{#each $users as user}}
            <div class="user-item" key="{{user.id}}">
              <span>{{user.name}}</span>
              <small>{{new Date(user.timestamp).toLocaleTimeString()}}</small>
            </div>
          {{/each}}
        </div>
      {{else}}
        <p>No users added yet.</p>
      {{/if}}
      
      <!-- Theme toggle -->
      <div class="theme-section">
        <button click="{{$toggleTheme}}" class="button secondary">
          Switch to {{$theme === 'light' ? 'dark' : 'light'}} theme
        </button>
        <p>Current theme: <strong>{{$theme}}</strong></p>
      </div>
      
      <!-- Reactive expressions -->
      <div class="stats">
        <p>Total interactions: {{$count + $users.length}}</p>
        <p>Status: {{$count > 5 ? 'Very active!' : 'Getting started'}}</p>
      </div>
    </div>
  `)
}

// ðŸŽ¯ Key Features Demonstrated:

// âœ… $ prefix variables with type inference
// âœ… ! suffix for reactive variables  
// âœ… Simplified arrow function syntax
// âœ… Automatic this binding in methods
// âœ… Clean template syntax with {{}} binding
// âœ… Event handlers with inline functions
// âœ… Conditional rendering with {{#if}}
// âœ… List rendering with {{#each}}
// âœ… Reactive expressions and computed values
// âœ… Optional semicolons (ASI support)
// âœ… Cross-framework compatibility

// ðŸš€ This syntax compiles to:
// - React: useState, useCallback, JSX
// - Vue: ref, computed, template
// - Svelte: reactive statements, markup