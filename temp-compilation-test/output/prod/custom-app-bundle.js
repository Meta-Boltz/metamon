const MTMRouter = { _signals: new Map(), _subscribers: new Map(), _routes: new Map(), _currentRoute: null, create(key, initialValue) { if (!this._signals.has(key)) { this._signals.set(key, initialValue); this._subscribers.set(key, new Set())} return { get value() { return MTMRouter._signals.get(key)}, set value(newValue) { MTMRouter._signals.set(key, newValue); MTMRouter._notifySubscribers(key, newValue)}, subscribe(callback) { MTMRouter._subscribers.get(key).add(callback)} }}, _notifySubscribers(key, value) { if (this._subscribers.has(key)) { this._subscribers.get(key).forEach(callback => callback(value))} }, navigate(path) { if (this._currentRoute !== path) { this._currentRoute = path; window.history.pushState({ path }, '', path); this.updatePage(path)} }, updatePage(path) { const route = this._routes.get(path); if (route && route.title) { document.title = route.title} this.emit('route-changed', { path, route })}, setupLinkInterception() { document.addEventListener('click', (e) => { const link = e.target.closest('a[data-link="true"], a:not([external]):not([href^="http"]):not([href^="mailto"]):not([href^="tel"])'); if (link && link.href && !link.hasAttribute('external')) { const url = new URL(link.href); if (url.origin === window.location.origin) { e.preventDefault(); this.navigate(url.pathname)} } })}, setupPopState() { window.addEventListener('popstate', (e) => { const path = e.state?.path || window.location.pathname; this._currentRoute = path; this.updatePage(path)})}, init() { this.setupLinkInterception(); this.setupPopState(); this._currentRoute = window.location.pathname}, emit(event, data) { console.log('MTM Router Event:', event, data); window.dispatchEvent(new CustomEvent('mtm-' + event, { detail: data }))} }; const MTMComponents = { _registry: new Map(), register(name, type, factory) { this._registry.set(name, { type, factory })}, mount(element, name, props = {}) { const component = this._registry.get(name); if (component) { const instance = component.factory(props); if (typeof instance.mount === 'function') { instance.mount(element)} else { element.innerHTML = instance} } }, mountAll() { document.querySelectorAll('[data-component]').forEach(el => { const componentName = el.getAttribute('data-component'); const componentType = el.getAttribute('data-type'); const props = {}; Array.from(el.attributes).forEach(attr => { if (attr.name.startsWith('data-prop-')) { const propName = attr.name.replace('data-prop-', ''); props[propName] = attr.value} }); this.mount(el, componentName, props)})} }; window.signal = MTMRouter; const pageMetadata = { "route": "/custom-test", "title": "Custom Mode Test", "description": "Testing custom JavaScript file compilation", "compileJsMode": "custom-app-bundle.js" }; MTMRouter._routes.set('/custom-test', pageMetadata); function ComponentPage() { const formData = MTMRouter.create('formData', signal('formData', {); const isValid = MTMRouter.create('isValid', $formData.name && $formData.email && $formData.message); const submitForm = (()) => { $submitForm = () => { if ($isValid.value) { console.log('Form submitted:', $formData) alert('Form submitted successfully!') $formData = { name: '', email: '', message: '' } } else { alert('Please fill in all fields') } } }; const updateField = ((field, value)) => { $updateField = (field, value) => { $formData = { ...$formData, [field]: value } } }; MTMComponents.register('ReactForm', 'react', (props) => { return `<div class="react-component">${component.name} Component (react)</div>`}); MTMComponents.register('SvelteWidget', 'svelte', (props) => { return `<div class="svelte-component">${component.name} Component (svelte)</div>`}); const container = document.getElementById('app'); const updateAll = () => { container.querySelectorAll('[data-bind="formData"]').forEach(el => { el.textContent = formData.value}); container.querySelectorAll('[data-bind="isValid"]').forEach(el => { el.textContent = isValid.value}); container.querySelectorAll('[data-if]').forEach(el => { const condition = el.getAttribute('data-if'); let shouldShow = false; try { let evalStr = condition; evalStr = evalStr.replace(/\formData/g, 'formData.value'); evalStr = evalStr.replace(/\isValid/g, 'isValid.value'); shouldShow = eval(evalStr)} catch (e) { console.warn('Condition failed:', condition, e)} el.style.display = shouldShow ? 'block' : 'none'})}; updateAll(); MTMComponents.mountAll(); formData.subscribe(() => updateAll()); container.querySelectorAll('[data-event-click="submitForm"]').forEach(el => { el.addEventListener('click', (e) => { e.preventDefault(); submitForm()})}); container.querySelectorAll('[data-event-click="updateField"]').forEach(el => { el.addEventListener('click', (e) => { e.preventDefault(); updateField()})})} document.addEventListener('DOMContentLoaded', () => { MTMRouter.init(); ComponentPage(); console.log('ğŸ”® Enhanced MTM Page loaded:', pageMetadata)});